{"version":3,"sources":["ng://ionic-rating/lib/ion-rating.component.ts","ng://ionic-rating/lib/ionic-rating.module.ts"],"names":["IonRatingComponent","cd","this","hover","EventEmitter","leave","rateChange","prototype","ngOnChanges","changes","rate","update","value","internalChange","readonly","disabled","emit","onChange","onTouched","onClick","resettable","onMouseEnter","hoverRate","onMouseLeave","onBlur","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ChangeDetectorRef","Input","Output","HostListener","IonicRatingModule","NgModule","imports","CommonModule","FormsModule","IonicModule","exports","declarations"],"mappings":"0bAAA,IAAAA,EAAA,WAwCE,SAAAA,EAAoBC,GAAAC,KAAAD,GAAAA,EARVC,KAAAC,MAAQ,IAAIC,EAAAA,aACZF,KAAAG,MAAQ,IAAID,EAAAA,aACZF,KAAAI,WAAa,IAAIF,EAAAA,aAqE7B,OA7DEJ,EAAAO,UAAAC,YAAA,SAAYC,GACNA,EAAQC,MACVR,KAAKS,OAAOT,KAAKQ,OAIbV,EAAAO,UAAAI,OAAR,SAAeC,EAAeC,QAAA,IAAAA,IAAAA,GAAA,GACtBX,KAAKY,UAAYZ,KAAKa,UAAYb,KAAKQ,OAASE,IACpDV,KAAKQ,KAAOE,EACZV,KAAKI,WAAWU,KAAKd,KAAKQ,OAExBG,IACEX,KAAKe,UACPf,KAAKe,SAASf,KAAKQ,MAEjBR,KAAKgB,WACPhB,KAAKgB,cAKXlB,EAAAO,UAAAY,QAAA,SAAQT,GACNR,KAAKS,OAAOT,KAAKkB,YAAclB,KAAKQ,OAASA,EAAO,EAAIA,IAG1DV,EAAAO,UAAAc,aAAA,SAAaT,GACLV,KAAKa,UAAYb,KAAKY,WAC1BZ,KAAKoB,UAAYV,GAEnBV,KAAKC,MAAMa,KAAKJ,IAIlBZ,EAAAO,UAAAgB,aADA,WAEErB,KAAKG,MAAMW,KAAKd,KAAKoB,WACrBpB,KAAKoB,UAAY,GAInBtB,EAAAO,UAAAiB,OADA,WAEMtB,KAAKgB,WACPhB,KAAKgB,aAITlB,EAAAO,UAAAkB,WAAA,SAAWb,GACTV,KAAKS,OAAOC,GAAO,GACnBV,KAAKD,GAAGyB,gBAGV1B,EAAAO,UAAAoB,iBAAA,SAAiBC,GACf1B,KAAKe,SAAWW,GAGlB5B,EAAAO,UAAAsB,kBAAA,SAAkBD,GAChB1B,KAAKgB,UAAYU,GAGnB5B,EAAAO,UAAAuB,iBAAA,SAAkBC,GAChB7B,KAAKa,SAAWgB,uBAvFnBC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,aACVC,SAAA,wVAEAC,gBAAiBC,EAAAA,wBAAwBC,OACzCC,UAAW,CACT,CACEC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAA3C,IAC9B4C,OAAO,ybAhBXC,EAAAA,mDAqBCC,EAAAA,wBACAA,EAAAA,0BACAA,EAAAA,oBACAA,EAAAA,qBACAC,EAAAA,sBACAA,EAAAA,2BACAA,EAAAA,6BAwCAC,EAAAA,aAAYf,KAAA,CAAC,aAAc,oBAM3Be,EAAAA,aAAYf,KAAA,CAAC,OAAQ,OAuBxBjC,EAvGA,GCAAiD,EAAA,WAQA,SAAAA,KAKgC,2BAL/BC,EAAAA,SAAQjB,KAAA,CAAC,CACRkB,QAAS,CAACC,EAAAA,aAAcC,EAAAA,YAAaC,EAAAA,aACrCC,QAAS,CAACvD,GACVwD,aAAc,CAACxD,OAEeiD,EAbhC","sourcesContent":["import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  forwardRef,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  HostListener,\n  OnChanges,\n  SimpleChanges\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n  selector: 'ion-rating',\n  templateUrl: './ion-rating.component.html',\n  styleUrls: ['./ion-rating.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => IonRatingComponent),\n      multi: true\n    }\n  ]\n})\nexport class IonRatingComponent implements ControlValueAccessor, OnChanges {\n  @Input() rate: number;\n  @Input() readonly: boolean;\n  @Input() resettable: boolean;\n  @Input() size: boolean;\n  @Output() hover = new EventEmitter<number>();\n  @Output() leave = new EventEmitter<number>();\n  @Output() rateChange = new EventEmitter<number>();\n  hoverRate: number;\n  disabled: boolean;\n  onChange: (_: number) => void;\n  onTouched: () => void;\n\n  constructor(private cd: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.rate) {\n      this.update(this.rate);\n    }\n  }\n\n  private update(value: number, internalChange = true): void {\n    if (!(this.readonly || this.disabled || this.rate === value)) {\n      this.rate = value;\n      this.rateChange.emit(this.rate);\n    }\n    if (internalChange) {\n      if (this.onChange) {\n        this.onChange(this.rate);\n      }\n      if (this.onTouched) {\n        this.onTouched();\n      }\n    }\n  }\n\n  onClick(rate: number): void {\n    this.update(this.resettable && this.rate === rate ? 0 : rate);\n  }\n\n  onMouseEnter(value: number) {\n    if (!(this.disabled || this.readonly)) {\n      this.hoverRate = value;\n    }\n    this.hover.emit(value);\n  }\n\n  @HostListener('mouseleave', [])\n  onMouseLeave(): void {\n    this.leave.emit(this.hoverRate);\n    this.hoverRate = 0;\n  }\n\n  @HostListener('blur', [])\n  onBlur(): void {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  writeValue(value: any): void {\n    this.update(value, false);\n    this.cd.markForCheck();\n  }\n\n  registerOnChange(fn: (_: number) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { IonRatingComponent } from './ion-rating.component';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, IonicModule],\n  exports: [IonRatingComponent],\n  declarations: [IonRatingComponent]\n})\nexport class IonicRatingModule {}\n"]}