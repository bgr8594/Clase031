"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const utils_1 = require("../utils");
function eslintRelatedChanges(options) {
    var _a;
    return (0, schematics_1.chain)([
        // Update the lint builder and config in angular.json
        (0, utils_1.addESLintTargetToProject)(options.name, 'lint'),
        // Create the ESLint config file for the project
        (0, utils_1.createESLintConfigForProject)(options.name, (_a = options.setParserOptionsProject) !== null && _a !== void 0 ? _a : false),
        // Delete the TSLint config file for the project
        (0, utils_1.removeTSLintJSONForProject)(options.name),
    ]);
}
function default_1(options) {
    return (host, context) => {
        // Remove angular-eslint specific options before passing to the Angular schematic
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { setParserOptionsProject } = options, angularOptions = __rest(options, ["setParserOptionsProject"]);
        return (0, schematics_1.chain)([
            (0, schematics_1.externalSchematic)('@schematics/angular', 'library', angularOptions),
            eslintRelatedChanges(options),
        ])(host, context);
    };
}
exports.default = default_1;
